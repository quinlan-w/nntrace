#include <string>

enum EU_TYPE
{
    CONV,
    CV,
    TENG,
    MAU,
    SDMA,
    UNKNOW,
};

enum EU_ID
{
    CONV0 = 0,
    CONV1,
    CONV2,
    CONV3,
    CONV4,
    CONV5,
    CV0,
    CV1,
    CV2,
    TENG0,
    TENG1,
    TENG2,
    MAU0,
    SDMA0,
    SDMA1,
    SDMA2,
    UNKNOW_ID,
};

typedef struct _CHANNEL
{
    int id;
    EU_ID eu_id;
    EU_TYPE type;
    std::string name;
} CHANNEL;

CHANNEL MC50_NEUSIGHT_CHANNELS[76] = {
    {0, CV0, CV, "cv0_ctrl"},
    {1, CV0, CV, "cv0_rdma0"},
    {2, CV0, CV, "cv0_rdma1"},
    {3, CV0, CV, "cv0_wdma"},
    {4, CONV0, CONV, "conv0_bkw"},
    {5, CONV1, CONV, "conv1_bkw"},
    {6, CONV2, CONV, "conv2_bkw"},
    {7, CONV3, CONV, "conv3_bkw"},
    {8, CONV4, CONV, "conv4_bkw"},
    {9, CONV5, CONV, "conv5_bkw"},
    {10, CONV0, CONV, "conv0_ctrl"},
    {11, CONV1, CONV, "conv1_ctrl"},
    {12, CONV2, CONV, "conv2_ctrl"},
    {13, CONV3, CONV, "conv3_ctrl"},
    {14, CONV4, CONV, "conv4_ctrl"},
    {15, CONV5, CONV, "conv5_ctrl"},
    {16, CV1, CV, "cv1_ctrl"},
    {17, CV1, CV, "cv1_rdma0"},
    {18, CV1, CV, "cv1_rdma1"},
    {19, CV1, CV, "cv1_wdma"},
    {20, CONV0, CONV, "conv0_rdma1"},
    {21, CONV1, CONV, "conv1_rdma1"},
    {22, CONV2, CONV, "conv2_rdma1"},
    {23, CONV3, CONV, "conv3_rdma1"},
    {24, CONV4, CONV, "conv4_rdma1"},
    {25, CONV5, CONV, "conv5_rdma1"},
    {26, CONV0, CONV, "conv0_rdma0"},
    {27, CONV1, CONV, "conv1_rdma0"},
    {28, CONV2, CONV, "conv2_rdma0"},
    {29, CONV3, CONV, "conv3_rdma0"},
    {30, CONV4, CONV, "conv4_rdma0"},
    {31, CONV5, CONV, "conv5_rdma0"},
    {32, CONV0, CONV, "conv0_wdma"},
    {33, CONV1, CONV, "conv1_wdma"},
    {34, TENG0, TENG, "teng0_ctrl"},
    {35, TENG0, TENG, "teng0_dma0"},
    {36, TENG0, TENG, "teng0_dma1"},
    {37, TENG0, TENG, "teng0_dma2"},
    {38, TENG0, TENG, "teng0_dma3"},
    {39, SDMA0, SDMA, "sdma0_ctrl"},
    {40, SDMA0, SDMA, "sdma0_dma"},
    {41, TENG1, TENG, "teng1_ctrl"},
    {42, TENG1, TENG, "teng1_dma0"},
    {43, TENG1, TENG, "teng1_dma1"},
    {44, TENG1, TENG, "teng1_dma2"},
    {45, TENG1, TENG, "teng1_dma3"},
    {46, SDMA1, SDMA, "sdma1_ctrl"},
    {47, SDMA1, SDMA, "sdma1_dma"},
    {48, CV2, CV, "cv2_ctrl"},
    {49, CV2, CV, "cv2_rdma0"},
    {50, CV2, CV, "cv2_rdma1"},
    {51, CV2, CV, "cv2_wdma"},
    {52, MAU0, MAU, "mau_ctrl"},
    {53, CONV2, CONV, "conv2_wdma"},
    {54, CONV3, CONV, "conv3_wdma"},
    {55, CONV4, CONV, "conv4_wdma"},
    {56, CONV5, CONV, "conv5_wdma"},
    {57, TENG2, TENG, "teng2_ctrl"},
    {58, TENG2, TENG, "teng2_dma0"},
    {59, TENG2, TENG, "teng2_dma1"},
    {60, TENG2, TENG, "teng2_dma2"},
    {61, TENG2, TENG, "teng2_dma3"},
    {62, SDMA2, SDMA, "sdma2_ctrl"},
    {63, SDMA2, SDMA, "sdma2_dma"},
    {64, CONV2, CONV, "conv2_count"},
    {65, CONV3, CONV, "conv3_count"},
    {66, CONV4, CONV, "conv4_count"},
    {67, CONV5, CONV, "conv5_count"},
    {68, CONV1, CONV, "conv1_count"},
    {69, TENG0, TENG, "teng0_count"},
    {70, TENG1, TENG, "teng1_count"},
    {71, TENG2, TENG, "teng2_count"},
    {72, CONV0, CONV, "conv0_count"},
    {73, CV0, CV, "cv0_count"},
    {74, CV1, CV, "cv1_count"},
    {75, CV2, CV, "cv2_count"},
};